// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "cdfdistances_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cdf_from_obs
XPtr<EmpiricalCDF> cdf_from_obs(NumericVector obs);
RcppExport SEXP _cdfdistances_cdf_from_obs(SEXP obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type obs(obsSEXP);
    rcpp_result_gen = Rcpp::wrap(cdf_from_obs(obs));
    return rcpp_result_gen;
END_RCPP
}
// cdf_from_timing
XPtr<EmpiricalCDF> cdf_from_timing(NumericVector t, NumericVector obs);
RcppExport SEXP _cdfdistances_cdf_from_timing(SEXP tSEXP, SEXP obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type obs(obsSEXP);
    rcpp_result_gen = Rcpp::wrap(cdf_from_timing(t, obs));
    return rcpp_result_gen;
END_RCPP
}
// eval_cdf
double eval_cdf(XPtr<EmpiricalCDF> cdf, double x);
RcppExport SEXP _cdfdistances_eval_cdf(SEXP cdfSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<EmpiricalCDF> >::type cdf(cdfSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_cdf(cdf, x));
    return rcpp_result_gen;
END_RCPP
}
// wasserstein
double wasserstein(XPtr<EmpiricalCDF> cdf1, XPtr<EmpiricalCDF> cdf2);
RcppExport SEXP _cdfdistances_wasserstein(SEXP cdf1SEXP, SEXP cdf2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<EmpiricalCDF> >::type cdf1(cdf1SEXP);
    Rcpp::traits::input_parameter< XPtr<EmpiricalCDF> >::type cdf2(cdf2SEXP);
    rcpp_result_gen = Rcpp::wrap(wasserstein(cdf1, cdf2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cdfdistances_cdf_from_obs", (DL_FUNC) &_cdfdistances_cdf_from_obs, 1},
    {"_cdfdistances_cdf_from_timing", (DL_FUNC) &_cdfdistances_cdf_from_timing, 2},
    {"_cdfdistances_eval_cdf", (DL_FUNC) &_cdfdistances_eval_cdf, 2},
    {"_cdfdistances_wasserstein", (DL_FUNC) &_cdfdistances_wasserstein, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_cdfdistances(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
